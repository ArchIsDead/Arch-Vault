-- Enhanced Elegant UI Library
-- Designed for Roblox with smooth animations and multiple themes

local ElegantUI = {}
ElegantUI.__index = ElegantUI

-- Default configuration
ElegantUI.Config = {
    Theme = "Dark",
    AccentColor = Color3.fromRGB(0, 120, 215),
    BackgroundColor = Color3.fromRGB(20, 20, 20),
    TextColor = Color3.fromRGB(255, 255, 255),
    BorderColor = Color3.fromRGB(40, 40, 40),
    Font = Enum.Font.Gotham,
    SaveKey = "ElegantUI_Settings",
    AnimationSpeed = 0.2
}

-- Available themes
ElegantUI.Themes = {
    Dark = {
        Background = Color3.fromRGB(20, 20, 20),
        Foreground = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Border = Color3.fromRGB(40, 40, 40),
        Hover = Color3.fromRGB(50, 50, 50),
        Success = Color3.fromRGB(46, 204, 113),
        Warning = Color3.fromRGB(241, 196, 15),
        Error = Color3.fromRGB(231, 76, 60)
    },
    Light = {
        Background = Color3.fromRGB(240, 240, 240),
        Foreground = Color3.fromRGB(255, 255, 255),
        Text = Color3.fromRGB(0, 0, 0),
        Border = Color3.fromRGB(200, 200, 200),
        Hover = Color3.fromRGB(230, 230, 230),
        Success = Color3.fromRGB(46, 204, 113),
        Warning = Color3.fromRGB(241, 196, 15),
        Error = Color3.fromRGB(231, 76, 60)
    },
    Blue = {
        Background = Color3.fromRGB(10, 30, 60),
        Foreground = Color3.fromRGB(20, 40, 80),
        Text = Color3.fromRGB(200, 220, 255),
        Border = Color3.fromRGB(40, 60, 100),
        Hover = Color3.fromRGB(30, 50, 90),
        Success = Color3.fromRGB(46, 204, 113),
        Warning = Color3.fromRGB(241, 196, 15),
        Error = Color3.fromRGB(231, 76, 60)
    }
}

-- Tweening service for smooth animations
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Data saving functions
local function SaveData(key, data)
    if not key then return end
    pcall(function()
        local json = HttpService:JSONEncode(data)
        if plugin then
            plugin:SetSetting(key, json)
        else
            if _G then
                _G[key] = json
            end
        end
    end)
end

local function LoadData(key)
    if not key then return nil end
    local success, result = pcall(function()
        if plugin then
            return plugin:GetSetting(key)
        else
            if _G and _G[key] then
                return _G[key]
            end
        end
        return nil
    end)
    
    if success and result then
        return HttpService:JSONDecode(result)
    end
    return nil
end

-- Load saved configuration
local savedConfig = LoadData(ElegantUI.Config.SaveKey)
if savedConfig then
    for k, v in pairs(savedConfig) do
        if ElegantUI.Config[k] ~= nil then
            ElegantUI.Config[k] = v
        end
    end
end

-- Utility functions
local function CreateElement(className, properties)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

local function Tween(element, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(
        duration or ElegantUI.Config.AnimationSpeed,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(element, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Notification system
local notificationQueue = {}
local showingNotification = false

local function ShowNotification(title, message, duration, notificationType)
    table.insert(notificationQueue, {
        Title = title,
        Message = message,
        Duration = duration or 5,
        Type = notificationType or "Info"
    })
    
    if not showingNotification then
        coroutine.wrap(function()
            showingNotification = true
            while #notificationQueue > 0 do
                local notif = table.remove(notificationQueue, 1)
                
                -- Create notification UI
                local notification = CreateElement("Frame", {
                    Name = "Notification",
                    Size = UDim2.new(0, 300, 0, 80),
                    Position = UDim2.new(1, 10, 0.1, 0),
                    BackgroundColor3 = ElegantUI.Themes[ElegantUI.Config.Theme].Foreground,
                    BorderSizePixel = 0,
                    AnchorPoint = Vector2.new(1, 0),
                    ZIndex = 100
                })
                
                local titleLabel = CreateElement("TextLabel", {
                    Name = "Title",
                    Size = UDim2.new(1, -20, 0, 20),
                    Position = UDim2.new(0, 10, 0, 10),
                    BackgroundTransparency = 1,
                    Text = notif.Title,
                    TextColor3 = ElegantUI.Themes[ElegantUI.Config.Theme].Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Font = ElegantUI.Config.Font,
                    TextSize = 16,
                    TextStrokeTransparency = 0.7,
                    ZIndex = 101
                })
                
                local messageLabel = CreateElement("TextLabel", {
                    Name = "Message",
                    Size = UDim2.new(1, -20, 0, 40),
                    Position = UDim2.new(0, 10, 0, 30),
                    BackgroundTransparency = 1,
                    Text = notif.Message,
                    TextColor3 = ElegantUI.Themes[ElegantUI.Config.Theme].Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Font = ElegantUI.Config.Font,
                    TextSize = 14,
                    TextWrapped = true,
                    ZIndex = 101
                })
                
                local accent = CreateElement("Frame", {
                    Name = "Accent",
                    Size = UDim2.new(0, 5, 1, 0),
                    BackgroundColor3 = ElegantUI.Themes[ElegantUI.Config.Theme][notif.Type] or ElegantUI.Config.AccentColor,
                    BorderSizePixel = 0,
                    ZIndex = 101
                })
                
                accent.Parent = notification
                titleLabel.Parent = notification
                messageLabel.Parent = notification
                
                -- Add to core GUI
                if game:GetService("CoreGui"):FindFirstChild("ElegantUINotifications") then
                    notification.Parent = game:GetService("CoreGui").ElegantUINotifications
                else
                    local notifHolder = CreateElement("ScreenGui", {
                        Name = "ElegantUINotifications",
                        ResetOnSpawn = false,
                        ZIndexBehavior = Enum.ZIndexBehavior.Global
                    })
                    notification.Parent = notifHolder
                    notifHolder.Parent = game:GetService("CoreGui")
                end
                
                -- Animate in
                Tween(notification, {Position = UDim2.new(1, -10, 0.1, 0)}, 0.3)
                wait(0.3)
                
                -- Wait for duration
                wait(notif.Duration)
                
                -- Animate out
                Tween(notification, {Position = UDim2.new(1, 10, 0.1, 0)}, 0.3)
                wait(0.3)
                
                notification:Destroy()
            end
            showingNotification = false
        end)()
    end
end

-- Main UI creation function
function ElegantUI:CreateWindow(title, size, position)
    local window = {}
    
    -- Main screen GUI
    local screenGui = CreateElement("ScreenGui", {
        Name = "ElegantUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    })
    
    -- Main frame
    local mainFrame = CreateElement("Frame", {
        Name = "MainFrame",
        Size = size or UDim2.new(0, 400, 0, 500),
        Position = position or UDim2.new(0.5, -200, 0.5, -250),
        BackgroundColor3 = self.Themes[self.Config.Theme].Background,
        BorderColor3 = self.Themes[self.Config.Theme].Border,
        BorderSizePixel = 1,
        ClipsDescendants = true
    })
    
    -- UI Corner
    local uiCorner = CreateElement("UICorner", {
        CornerRadius = UDim.new(0, 6)
    })
    uiCorner.Parent = mainFrame
    
    -- Title bar
    local titleBar = CreateElement("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
        BorderSizePixel = 0
    })
    
    local titleText = CreateElement("TextLabel", {
        Name = "TitleText",
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title or "Elegant UI",
        TextColor3 = self.Themes[self.Config.Theme].Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = self.Config.Font,
        TextSize = 14
    })
    
    local closeButton = CreateElement("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundTransparency = 1,
        Text = "X",
        TextColor3 = self.Themes[self.Config.Theme].Text,
        Font = self.Config.Font,
        TextSize = 14
    })
    
    -- Content frame
    local contentFrame = CreateElement("ScrollingFrame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -10, 1, -40),
        Position = UDim2.new(0, 5, 0, 35),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = self.Themes[self.Config.Theme].Border,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })
    
    local uiListLayout = CreateElement("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10)
    })
    
    uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Assemble UI
    titleBar.Parent = mainFrame
    titleText.Parent = titleBar
    closeButton.Parent = titleBar
    contentFrame.Parent = mainFrame
    uiListLayout.Parent = contentFrame
    mainFrame.Parent = screenGui
    screenGui.Parent = game:GetService("CoreGui") or game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Draggable functionality
    local dragging = false
    local dragInput, dragStart, startPos

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        Tween(mainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.2):Play()
        wait(0.2)
        screenGui:Destroy()
    end)
    
    -- Window methods
    function window:SetTheme(themeName)
        if self.Themes[themeName] then
            self.Config.Theme = themeName
            self:UpdateTheme()
            SaveData(self.Config.SaveKey, self.Config)
        end
    end
    
    function window:UpdateTheme()
        local theme = self.Themes[self.Config.Theme]
        mainFrame.BackgroundColor3 = theme.Background
        mainFrame.BorderColor3 = theme.Border
        titleBar.BackgroundColor3 = theme.Foreground
        titleText.TextColor3 = theme.Text
        closeButton.TextColor3 = theme.Text
        contentFrame.ScrollBarImageColor3 = theme.Border
    end
    
    function window:Notify(title, message, duration, type)
        ShowNotification(title, message, duration, type)
    end
    
    function window:AddTab(name)
        local tab = {}
        local tabButton = CreateElement("TextButton", {
            Name = name .. "Tab",
            Size = UDim2.new(0, 80, 0, 30),
            BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
            BorderSizePixel = 0,
            Text = name,
            TextColor3 = self.Themes[self.Config.Theme].Text,
            Font = self.Config.Font,
            TextSize = 14
        })
        
        local tabContent = CreateElement("Frame", {
            Name = name .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false
        })
        
        local tabListLayout = CreateElement("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        tabListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabListLayout.AbsoluteContentSize.Y + 10)
        end)
        
        tabListLayout.Parent = tabContent
        tabContent.Parent = contentFrame
        tabButton.Parent = titleBar
        
        -- Tab switching
        tabButton.MouseButton1Click:Connect(function()
            for _, child in ipairs(contentFrame:GetChildren()) do
                if child:IsA("Frame") then
                    child.Visible = false
                end
            end
            tabContent.Visible = true
        end)
        
        -- Make first tab active by default
        if #contentFrame:GetChildren() == 1 then -- Only has UIListLayout
            tabContent.Visible = true
        end
        
        -- Tab methods
        function tab:AddButton(text, callback)
            local button = CreateElement("TextButton", {
                Name = text .. "Button",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            button.MouseEnter:Connect(function()
                Tween(button, {BackgroundColor3 = self.Themes[self.Config.Theme].Hover}, 0.1)
            end)
            
            button.MouseLeave:Connect(function()
                Tween(button, {BackgroundColor3 = self.Themes[self.Config.Theme].Foreground}, 0.1)
            end)
            
            button.MouseButton1Click:Connect(function()
                if callback then
                    callback()
                end
            end)
            
            button.Parent = tabContent
            return button
        end
        
        function tab:AddToggle(text, default, callback)
            local toggle = {}
            local toggled = default or false
            
            local toggleFrame = CreateElement("Frame", {
                Name = text .. "Toggle",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local toggleText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local toggleButton = CreateElement("TextButton", {
                Name = "Toggle",
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(0.7, 10, 0.5, -10),
                BackgroundColor3 = toggled and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = "",
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local toggleIndicator = CreateElement("Frame", {
                Name = "Indicator",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(0, toggled and 22 or 2, 0.5, -8),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0
            })
            
            toggleText.Parent = toggleFrame
            toggleButton.Parent = toggleFrame
            toggleIndicator.Parent = toggleButton
            toggleFrame.Parent = tabContent
            
            toggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                Tween(toggleIndicator, {Position = UDim2.new(0, toggled and 22 or 2, 0.5, -8)}, 0.1)
                Tween(toggleButton, {BackgroundColor3 = toggled and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
                
                if callback then
                    callback(toggled)
                end
            end)
            
            function toggle:SetValue(value)
                toggled = value
                Tween(toggleIndicator, {Position = UDim2.new(0, toggled and 22 or 2, 0.5, -8)}, 0.1)
                Tween(toggleButton, {BackgroundColor3 = toggled and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
            end
            
            function toggle:GetValue()
                return toggled
            end
            
            return toggle
        end
        
        function tab:AddSlider(text, min, max, default, callback)
            local slider = {}
            local value = default or min
            
            local sliderFrame = CreateElement("Frame", {
                Name = text .. "Slider",
                Size = UDim2.new(1, -20, 0, 50),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local sliderText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text .. ": " .. tostring(value),
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local sliderTrack = CreateElement("Frame", {
                Name = "Track",
                Size = UDim2.new(1, 0, 0, 5),
                Position = UDim2.new(0, 0, 0, 30),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0
            })
            
            local sliderFill = CreateElement("Frame", {
                Name = "Fill",
                Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = self.Config.AccentColor,
                BorderSizePixel = 0
            })
            
            local sliderButton = CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(0, 15, 0, 15),
                Position = UDim2.new((value - min) / (max - min), -7.5, 0.5, -7.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Text = "",
                ZIndex = 2
            })
            
            sliderFill.Parent = sliderTrack
            sliderButton.Parent = sliderTrack
            sliderText.Parent = sliderFrame
            sliderTrack.Parent = sliderFrame
            sliderFrame.Parent = tabContent
            
            local dragging = false
            
            local function updateValue(input)
                local relativeX = (input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X
                relativeX = math.clamp(relativeX, 0, 1)
                value = math.floor(min + (max - min) * relativeX)
                sliderText.Text = text .. ": " .. tostring(value)
                sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativeX, -7.5, 0.5, -7.5)
                
                if callback then
                    callback(value)
                end
            end
            
            sliderButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateValue(input)
                end
            end)
            
            sliderButton.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            sliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateValue(input)
                end
            end)
            
            sliderTrack.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateValue(input)
                end
            end)
            
            function slider:SetValue(newValue)
                value = math.clamp(newValue, min, max)
                local relativeX = (value - min) / (max - min)
                sliderText.Text = text .. ": " .. tostring(value)
                sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                sliderButton.Position = UDim2.new(relativeX, -7.5, 0.5, -7.5)
                
                if callback then
                    callback(value)
                end
            end
            
            function slider:GetValue()
                return value
            end
            
            return slider
        end
        
        function tab:AddDropdown(text, options, default, callback)
            local dropdown = {}
            local selected = default or options[1]
            local open = false
            
            local dropdownFrame = CreateElement("Frame", {
                Name = text .. "Dropdown",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local dropdownText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.5, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local dropdownButton = CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(0.5, 0, 1, 0),
                Position = UDim2.new(0.5, 0, 0, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = selected,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local dropdownList = CreateElement("ScrollingFrame", {
                Name = "List",
                Size = UDim2.new(0.5, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 1, 5),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                ScrollBarThickness = 5,
                ScrollBarImageColor3 = self.Themes[self.Config.Theme].Border,
                Visible = false,
                ClipsDescendants = true
            })
            
            local listLayout = CreateElement("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            dropdownText.Parent = dropdownFrame
            dropdownButton.Parent = dropdownFrame
            dropdownList.Parent = dropdownFrame
            listLayout.Parent = dropdownList
            dropdownFrame.Parent = tabContent
            
            for i, option in ipairs(options) do
                local optionButton = CreateElement("TextButton", {
                    Name = option,
                    Size = UDim2.new(1, 0, 0, 25),
                    BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                    BorderSizePixel = 0,
                    Text = option,
                    TextColor3 = self.Themes[self.Config.Theme].Text,
                    Font = self.Config.Font,
                    TextSize = 14,
                    LayoutOrder = i
                })
                
                optionButton.MouseEnter:Connect(function()
                    Tween(optionButton, {BackgroundColor3 = self.Themes[self.Config.Theme].Hover}, 0.1)
                end)
                
                optionButton.MouseLeave:Connect(function()
                    Tween(optionButton, {BackgroundColor3 = self.Themes[self.Config.Theme].Foreground}, 0.1)
                end)
                
                optionButton.MouseButton1Click:Connect(function()
                    selected = option
                    dropdownButton.Text = selected
                    Tween(dropdownList, {Size = UDim2.new(0.5, 0, 0, 0)}, 0.1)
                    wait(0.1)
                    dropdownList.Visible = false
                    open = false
                    
                    if callback then
                        callback(selected)
                    end
                end)
                
                optionButton.Parent = dropdownList
            end
            
            dropdownButton.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    dropdownList.Visible = true
                    local contentHeight = math.min(#options * 25, 125)
                    Tween(dropdownList, {Size = UDim2.new(0.5, 0, 0, contentHeight)}, 0.1)
                else
                    Tween(dropdownList, {Size = UDim2.new(0.5, 0, 0, 0)}, 0.1)
                    wait(0.1)
                    dropdownList.Visible = false
                end
            end)
            
            function dropdown:SetValue(value)
                if table.find(options, value) then
                    selected = value
                    dropdownButton.Text = selected
                    
                    if callback then
                        callback(selected)
                    end
                end
            end
            
            function dropdown:GetValue()
                return selected
            end
            
            return dropdown
        end
        
        function tab:AddTextBox(text, placeholder, default, callback)
            local textbox = {}
            local value = default or ""
            
            local textboxFrame = CreateElement("Frame", {
                Name = text .. "TextBox",
                Size = UDim2.new(1, -20, 0, 50),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local textboxText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local textboxInput = CreateElement("TextBox", {
                Name = "Input",
                Size = UDim2.new(1, 0, 0, 25),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = value,
                PlaceholderText = placeholder or "",
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14,
                ClearTextOnFocus = false
            })
            
            textboxText.Parent = textboxFrame
            textboxInput.Parent = textboxFrame
            textboxFrame.Parent = tabContent
            
            textboxInput.FocusLost:Connect(function()
                value = textboxInput.Text
                if callback then
                    callback(value)
                end
            end)
            
            function textbox:SetValue(newValue)
                value = newValue
                textboxInput.Text = value
                
                if callback then
                    callback(value)
                end
            end
            
            function textbox:GetValue()
                return value
            end
            
            return textbox
        end
        
        function tab:AddLabel(text)
            local labelFrame = CreateElement("Frame", {
                Name = text .. "Label",
                Size = UDim2.new(1, -20, 0, 20),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local labelText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            labelText.Parent = labelFrame
            labelFrame.Parent = tabContent
            
            return labelFrame
        end
        
        function tab:AddImage(imageUrl, size)
            local imageFrame = CreateElement("Frame", {
                Name = "ImageFrame",
                Size = size or UDim2.new(1, -20, 0, 150),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local image = CreateElement("ImageLabel", {
                Name = "Image",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Image = imageUrl,
                ScaleType = Enum.ScaleType.Crop
            })
            
            image.Parent = imageFrame
            imageFrame.Parent = tabContent
            
            return imageFrame
        end
        
        function tab:AddColorPicker(text, defaultColor, callback)
            local colorPicker = {}
            local selectedColor = defaultColor or Color3.fromRGB(255, 255, 255)
            local open = false
            
            local colorFrame = CreateElement("Frame", {
                Name = text .. "ColorPicker",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local colorText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.5, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local colorButton = CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(0, 60, 0, 20),
                Position = UDim2.new(0.5, 0, 0.5, -10),
                BackgroundColor3 = selectedColor,
                BorderSizePixel = 0,
                Text = "",
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local colorPickerFrame = CreateElement("Frame", {
                Name = "Picker",
                Size = UDim2.new(0, 200, 0, 200),
                Position = UDim2.new(0.5, -100, 1, 5),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Visible = false,
                ZIndex = 10
            })
            
            local hueFrame = CreateElement("Frame", {
                Name = "Hue",
                Size = UDim2.new(0, 20, 1, -10),
                Position = UDim2.new(1, -25, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                ZIndex = 11
            })
            
            local saturationFrame = CreateElement("Frame", {
                Name = "Saturation",
                Size = UDim2.new(1, -30, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 0, 0),
                BorderSizePixel = 0,
                ZIndex = 11
            })
            
            local hueSelector = CreateElement("Frame", {
                Name = "HueSelector",
                Size = UDim2.new(1, 0, 0, 2),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                ZIndex = 12
            })
            
            local saturationSelector = CreateElement("Frame", {
                Name = "SaturationSelector",
                Size = UDim2.new(0, 5, 0, 5),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 1,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                ZIndex = 12
            })
            
            -- Create hue gradient
            local hueGradient = CreateElement("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                },
                Rotation = 90
            })
            hueGradient.Parent = hueFrame
            
            colorText.Parent = colorFrame
            colorButton.Parent = colorFrame
            colorPickerFrame.Parent = colorFrame
            hueFrame.Parent = colorPickerFrame
            saturationFrame.Parent = colorPickerFrame
            hueSelector.Parent = hueFrame
            saturationSelector.Parent = saturationFrame
            colorFrame.Parent = tabContent
            
            colorButton.MouseButton1Click:Connect(function()
                open = not open
                colorPickerFrame.Visible = open
            end)
            
            local function updateColor()
                colorButton.BackgroundColor3 = selectedColor
                if callback then
                    callback(selectedColor)
                end
            end
            
            local hueDragging = false
            local saturationDragging = false
            
            hueFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    hueDragging = true
                    local yPos = math.clamp((input.Position.Y - hueFrame.AbsolutePosition.Y) / hueFrame.AbsoluteSize.Y, 0, 1)
                    hueSelector.Position = UDim2.new(0, 0, yPos, 0)
                    -- Calculate hue from position
                    local hue = (1 - yPos) * 360
                    -- Update saturation background
                    local currentColor = Color3.fromHSV(hue/360, 1, 1)
                    saturationFrame.BackgroundColor3 = currentColor
                    selectedColor = currentColor
                    updateColor()
                end
            end)
            
            saturationFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    saturationDragging = true
                    local xPos = math.clamp((input.Position.X - saturationFrame.AbsolutePosition.X) / saturationFrame.AbsoluteSize.X, 0, 1)
                    local yPos = math.clamp((input.Position.Y - saturationFrame.AbsolutePosition.Y) / saturationFrame.AbsoluteSize.Y, 0, 1)
                    saturationSelector.Position = UDim2.new(xPos, -2.5, yPos, -2.5)
                    -- Calculate color from position
                    local hue = (1 - hueSelector.Position.Y.Scale) * 360
                    local saturation = xPos
                    local value = 1 - yPos
                    selectedColor = Color3.fromHSV(hue/360, saturation, value)
                    updateColor()
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if hueDragging then
                        local yPos = math.clamp((input.Position.Y - hueFrame.AbsolutePosition.Y) / hueFrame.AbsoluteSize.Y, 0, 1)
                        hueSelector.Position = UDim2.new(0, 0, yPos, 0)
                        -- Calculate hue from position
                        local hue = (1 - yPos) * 360
                        -- Update saturation background
                        local currentColor = Color3.fromHSV(hue/360, 1, 1)
                        saturationFrame.BackgroundColor3 = currentColor
                        selectedColor = currentColor
                        updateColor()
                    elseif saturationDragging then
                        local xPos = math.clamp((input.Position.X - saturationFrame.AbsolutePosition.X) / saturationFrame.AbsoluteSize.X, 0, 1)
                        local yPos = math.clamp((input.Position.Y - saturationFrame.AbsolutePosition.Y) / saturationFrame.AbsoluteSize.Y, 0, 1)
                        saturationSelector.Position = UDim2.new(xPos, -2.5, yPos, -2.5)
                        -- Calculate color from position
                        local hue = (1 - hueSelector.Position.Y.Scale) * 360
                        local saturation = xPos
                        local value = 1 - yPos
                        selectedColor = Color3.fromHSV(hue/360, saturation, value)
                        updateColor()
                    end
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    hueDragging = false
                    saturationDragging = false
                end
            end)
            
            function colorPicker:SetValue(color)
                selectedColor = color
                updateColor()
            end
            
            function colorPicker:GetValue()
                return selectedColor
            end
            
            return colorPicker
        end
        
        function tab:AddKeybind(text, defaultKey, callback)
            local keybind = {}
            local currentKey = defaultKey or Enum.KeyCode.Unknown
            local listening = false
            
            local keybindFrame = CreateElement("Frame", {
                Name = text .. "Keybind",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local keybindText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(0.5, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local keybindButton = CreateElement("TextButton", {
                Name = "Button",
                Size = UDim2.new(0, 80, 0, 20),
                Position = UDim2.new(0.5, 0, 0.5, -10),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = tostring(currentKey):gsub("Enum.KeyCode.", ""),
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            keybindText.Parent = keybindFrame
            keybindButton.Parent = keybindFrame
            keybindFrame.Parent = tabContent
            
            local connection
            keybindButton.MouseButton1Click:Connect(function()
                if listening then return end
                
                listening = true
                keybindButton.Text = "..."
                keybindButton.BackgroundColor3 = self.Config.AccentColor
                
                if connection then
                    connection:Disconnect()
                end
                
                connection = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                        keybindButton.Text = tostring(currentKey):gsub("Enum.KeyCode.", "")
                        keybindButton.BackgroundColor3 = self.Themes[self.Config.Theme].Foreground
                        listening = false
                        connection:Disconnect()
                        
                        if callback then
                            callback(currentKey)
                        end
                    end
                end)
            end)
            
            function keybind:SetValue(key)
                currentKey = key
                keybindButton.Text = tostring(currentKey):gsub("Enum.KeyCode.", "")
                
                if callback then
                    callback(currentKey)
                end
            end
            
            function keybind:GetValue()
                return currentKey
            end
            
            return keybind
        end
        
        function tab:AddDivider()
            local divider = CreateElement("Frame", {
                Name = "Divider",
                Size = UDim2.new(1, -20, 0, 1),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Border,
                BorderSizePixel = 0,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            divider.Parent = tabContent
            return divider
        end
        
        function tab:AddCard(title, content)
            local card = CreateElement("Frame", {
                Name = title .. "Card",
                Size = UDim2.new(1, -20, 0, 80),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local cardTitle = CreateElement("TextLabel", {
                Name = "Title",
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = title,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14,
                TextWrapped = true
            })
            
            local cardContent = CreateElement("TextLabel", {
                Name = "Content",
                Size = UDim2.new(1, -10, 0, 50),
                Position = UDim2.new(0, 5, 0, 25),
                BackgroundTransparency = 1,
                Text = content,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 12,
                TextWrapped = true
            })
            
            cardTitle.Parent = card
            cardContent.Parent = card
            card.Parent = tabContent
            
            return card
        end
        
        function tab:AddProgressBar(text, min, max, value)
            local progressBar = {}
            local currentValue = value or min
            
            local progressFrame = CreateElement("Frame", {
                Name = text .. "ProgressBar",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local progressText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 15),
                BackgroundTransparency = 1,
                Text = text .. ": " .. tostring(currentValue) .. "/" .. tostring(max),
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 12
            })
            
            local progressTrack = CreateElement("Frame", {
                Name = "Track",
                Size = UDim2.new(1, 0, 0, 10),
                Position = UDim2.new(0, 0, 0, 20),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0
            })
            
            local progressFill = CreateElement("Frame", {
                Name = "Fill",
                Size = UDim2.new((currentValue - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = self.Config.AccentColor,
                BorderSizePixel = 0
            })
            
            progressText.Parent = progressFrame
            progressTrack.Parent = progressFrame
            progressFill.Parent = progressTrack
            progressFrame.Parent = tabContent
            
            function progressBar:SetValue(value)
                currentValue = math.clamp(value, min, max)
                progressText.Text = text .. ": " .. tostring(currentValue) .. "/" .. tostring(max)
                progressFill.Size = UDim2.new((currentValue - min) / (max - min), 0, 1, 0)
            end
            
            function progressBar:GetValue()
                return currentValue
            end
            
            return progressBar
        end
        
        function tab:AddButtonGroup(buttons)
            local buttonGroup = CreateElement("Frame", {
                Name = "ButtonGroup",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local uiListLayout = CreateElement("UIListLayout", {
                FillDirection = Enum.FillDirection.Horizontal,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            })
            
            uiListLayout.Parent = buttonGroup
            
            for i, buttonData in ipairs(buttons) do
                local button = CreateElement("TextButton", {
                    Name = buttonData.Text .. "Button",
                    Size = UDim2.new(1 / #buttons, -5, 1, 0),
                    BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                    BorderSizePixel = 0,
                    Text = buttonData.Text,
                    TextColor3 = self.Themes[self.Config.Theme].Text,
                    Font = self.Config.Font,
                    TextSize = 14,
                    LayoutOrder = i
                })
                
                button.MouseEnter:Connect(function()
                    Tween(button, {BackgroundColor3 = self.Themes[self.Config.Theme].Hover}, 0.1)
                end)
                
                button.MouseLeave:Connect(function()
                    Tween(button, {BackgroundColor3 = self.Themes[self.Config.Theme].Foreground}, 0.1)
                end)
                
                button.MouseButton1Click:Connect(function()
                    if buttonData.Callback then
                        buttonData.Callback()
                    end
                end)
                
                button.Parent = buttonGroup
            end
            
            buttonGroup.Parent = tabContent
            return buttonGroup
        end
        
        function tab:AddSearchBox(text, placeholder, options, callback)
            local searchBox = {}
            local value = ""
            local filteredOptions = options
            
            local searchFrame = CreateElement("Frame", {
                Name = text .. "SearchBox",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local searchInput = CreateElement("TextBox", {
                Name = "Input",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = "",
                PlaceholderText = placeholder or "Search...",
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14,
                ClearTextOnFocus = false
            })
            
            local searchList = CreateElement("ScrollingFrame", {
                Name = "List",
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 1, 5),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                ScrollBarThickness = 5,
                ScrollBarImageColor3 = self.Themes[self.Config.Theme].Border,
                Visible = false,
                ClipsDescendants = true
            })
            
            local listLayout = CreateElement("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            searchInput.Parent = searchFrame
            searchList.Parent = searchFrame
            listLayout.Parent = searchList
            searchFrame.Parent = tabContent
            
            local function updateSearchResults()
                -- Clear existing results
                for _, child in ipairs(searchList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Filter options based on search text
                filteredOptions = {}
                for _, option in ipairs(options) do
                    if string.find(string.lower(option), string.lower(value)) then
                        table.insert(filteredOptions, option)
                    end
                end
                
                -- Add results to list
                for i, option in ipairs(filteredOptions) do
                    local optionButton = CreateElement("TextButton", {
                        Name = option,
                        Size = UDim2.new(1, 0, 0, 25),
                        BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                        BorderSizePixel = 0,
                        Text = option,
                        TextColor3 = self.Themes[self.Config.Theme].Text,
                        Font = self.Config.Font,
                        TextSize = 14,
                        LayoutOrder = i
                    })
                    
                    optionButton.MouseEnter:Connect(function()
                        Tween(optionButton, {BackgroundColor3 = self.Themes[self.Config.Theme].Hover}, 0.1)
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        Tween(optionButton, {BackgroundColor3 = self.Themes[self.Config.Theme].Foreground}, 0.1)
                    end)
                    
                    optionButton.MouseButton1Click:Connect(function()
                        value = option
                        searchInput.Text = value
                        Tween(searchList, {Size = UDim2.new(1, 0, 0, 0)}, 0.1)
                        wait(0.1)
                        searchList.Visible = false
                        
                        if callback then
                            callback(value)
                        end
                    end)
                    
                    optionButton.Parent = searchList
                end
                
                -- Update list size
                local contentHeight = math.min(#filteredOptions * 25, 125)
                searchList.CanvasSize = UDim2.new(0, 0, 0, #filteredOptions * 25)
                if searchList.Visible then
                    Tween(searchList, {Size = UDim2.new(1, 0, 0, contentHeight)}, 0.1)
                end
            end
            
            searchInput.Focused:Connect(function()
                searchList.Visible = true
                updateSearchResults()
            end)
            
            searchInput.FocusLost:Connect(function()
                wait(0.1) -- Small delay to allow click events
                Tween(searchList, {Size = UDim2.new(1, 0, 0, 0)}, 0.1)
                wait(0.1)
                searchList.Visible = false
            end)
            
            searchInput:GetPropertyChangedSignal("Text"):Connect(function()
                value = searchInput.Text
                updateSearchResults()
                
                if callback and value == "" then
                    callback(value)
                end
            end)
            
            function searchBox:SetValue(newValue)
                value = newValue
                searchInput.Text = value
                
                if callback then
                    callback(value)
                end
            end
            
            function searchBox:GetValue()
                return value
            end
            
            return searchBox
        end
        
        function tab:AddChecklist(text, options, default, callback)
            local checklist = {}
            local selected = default or {}
            
            local checklistFrame = CreateElement("Frame", {
                Name = text .. "Checklist",
                Size = UDim2.new(1, -20, 0, 20 + (#options * 25)),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local checklistText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            checklistText.Parent = checklistFrame
            
            for i, option in ipairs(options) do
                local optionFrame = CreateElement("Frame", {
                    Name = option .. "Option",
                    Size = UDim2.new(1, 0, 0, 20),
                    Position = UDim2.new(0, 0, 0, 20 + ((i-1) * 25)),
                    BackgroundTransparency = 1
                })
                
                local optionCheck = CreateElement("TextButton", {
                    Name = "Check",
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundColor3 = selected[option] and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground,
                    BorderSizePixel = 0,
                    Text = selected[option] and "✓" or "",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    Font = self.Config.Font,
                    TextSize = 14
                })
                
                local optionText = CreateElement("TextLabel", {
                    Name = "Text",
                    Size = UDim2.new(1, -25, 1, 0),
                    Position = UDim2.new(0, 25, 0, 0),
                    BackgroundTransparency = 1,
                    Text = option,
                    TextColor3 = self.Themes[self.Config.Theme].Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Font = self.Config.Font,
                    TextSize = 14
                })
                
                optionCheck.MouseButton1Click:Connect(function()
                    selected[option] = not selected[option]
                    optionCheck.Text = selected[option] and "✓" or ""
                    Tween(optionCheck, {BackgroundColor3 = selected[option] and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
                    
                    if callback then
                        callback(option, selected[option])
                    end
                end)
                
                optionCheck.Parent = optionFrame
                optionText.Parent = optionFrame
                optionFrame.Parent = checklistFrame
            end
            
            checklistFrame.Parent = tabContent
            
            function checklist:SetValue(option, value)
                if options[option] then
                    selected[option] = value
                    local check = checklistFrame:FindFirstChild(option .. "Option"):FindFirstChild("Check")
                    if check then
                        check.Text = value and "✓" or ""
                        Tween(check, {BackgroundColor3 = value and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
                    end
                    
                    if callback then
                        callback(option, value)
                    end
                end
            end
            
            function checklist:GetValue(option)
                return selected[option]
            end
            
            function checklist:GetAllValues()
                return selected
            end
            
            return checklist
        end
        
        function tab:AddRadioGroup(text, options, default, callback)
            local radioGroup = {}
            local selected = default or options[1]
            
            local radioFrame = CreateElement("Frame", {
                Name = text .. "RadioGroup",
                Size = UDim2.new(1, -20, 0, 20 + (#options * 25)),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local radioText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            radioText.Parent = radioFrame
            
            for i, option in ipairs(options) do
                local optionFrame = CreateElement("Frame", {
                    Name = option .. "Option",
                    Size = UDim2.new(1, 0, 0, 20),
                    Position = UDim2.new(0, 0, 0, 20 + ((i-1) * 25)),
                    BackgroundTransparency = 1
                })
                
                local radioButton = CreateElement("TextButton", {
                    Name = "Radio",
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundColor3 = option == selected and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground,
                    BorderSizePixel = 0,
                    Text = option == selected and "●" or "",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    Font = self.Config.Font,
                    TextSize = 14
                })
                
                local optionText = CreateElement("TextLabel", {
                    Name = "Text",
                    Size = UDim2.new(1, -25, 1, 0),
                    Position = UDim2.new(0, 25, 0, 0),
                    BackgroundTransparency = 1,
                    Text = option,
                    TextColor3 = self.Themes[self.Config.Theme].Text,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Font = self.Config.Font,
                    TextSize = 14
                })
                
                radioButton.MouseButton1Click:Connect(function()
                    selected = option
                    
                    -- Update all radio buttons
                    for _, child in ipairs(radioFrame:GetChildren()) do
                        if child:IsA("Frame") and child.Name:find("Option") then
                            local radio = child:FindFirstChild("Radio")
                            if radio then
                                local isSelected = child.Name:gsub("Option", "") == selected
                                radio.Text = isSelected and "●" or ""
                                Tween(radio, {BackgroundColor3 = isSelected and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
                            end
                        end
                    end
                    
                    if callback then
                        callback(selected)
                    end
                end)
                
                radioButton.Parent = optionFrame
                optionText.Parent = optionFrame
                optionFrame.Parent = radioFrame
            end
            
            radioFrame.Parent = tabContent
            
            function radioGroup:SetValue(value)
                if table.find(options, value) then
                    selected = value
                    
                    -- Update all radio buttons
                    for _, child in ipairs(radioFrame:GetChildren()) do
                        if child:IsA("Frame") and child.Name:find("Option") then
                            local radio = child:FindFirstChild("Radio")
                            if radio then
                                local isSelected = child.Name:gsub("Option", "") == selected
                                radio.Text = isSelected and "●" or ""
                                Tween(radio, {BackgroundColor3 = isSelected and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground}, 0.1)
                            end
                        end
                    end
                    
                    if callback then
                        callback(selected)
                    end
                end
            end
            
            function radioGroup:GetValue()
                return selected
            end
            
            return radioGroup
        end
        
        function tab:AddCalendar(text, defaultDate, callback)
            local calendar = {}
            local selectedDate = defaultDate or os.date("*t")
            
            local calendarFrame = CreateElement("Frame", {
                Name = text .. "Calendar",
                Size = UDim2.new(1, -20, 0, 200),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local calendarText = CreateElement("TextLabel", {
                Name = "Text",
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = self.Themes[self.Config.Theme].Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local calendarHeader = CreateElement("Frame", {
                Name = "Header",
                Size = UDim2.new(1, 0, 0, 30),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundTransparency = 1
            })
            
            local prevMonth = CreateElement("TextButton", {
                Name = "PrevMonth",
                Size = UDim2.new(0, 30, 1, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = "<",
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local monthYear = CreateElement("TextLabel", {
                Name = "MonthYear",
                Size = UDim2.new(1, -60, 1, 0),
                Position = UDim2.new(0, 30, 0, 0),
                BackgroundTransparency = 1,
                Text = os.date("%B %Y", os.time(selectedDate)),
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local nextMonth = CreateElement("TextButton", {
                Name = "NextMonth",
                Size = UDim2.new(0, 30, 1, 0),
                Position = UDim2.new(1, -30, 0, 0),
                BackgroundColor3 = self.Themes[self.Config.Theme].Foreground,
                BorderSizePixel = 0,
                Text = ">",
                TextColor3 = self.Themes[self.Config.Theme].Text,
                Font = self.Config.Font,
                TextSize = 14
            })
            
            local daysGrid = CreateElement("Frame", {
                Name = "DaysGrid",
                Size = UDim2.new(1, 0, 1, -55),
                Position = UDim2.new(0, 0, 0, 55),
                BackgroundTransparency = 1
            })
            
            local uiGridLayout = CreateElement("UIGridLayout", {
                CellSize = UDim2.new(1/7, -2, 1/6, -2),
                CellPadding = UDim2.new(0, 2, 0, 2),
                SortOrder = Enum.SortOrder.LayoutOrder,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                VerticalAlignment = Enum.VerticalAlignment.Center
            })
            
            calendarText.Parent = calendarFrame
            calendarHeader.Parent = calendarFrame
            prevMonth.Parent = calendarHeader
            monthYear.Parent = calendarHeader
            nextMonth.Parent = calendarHeader
            daysGrid.Parent = calendarFrame
            uiGridLayout.Parent = daysGrid
            
            local function updateCalendar()
                -- Clear existing days
                for _, child in ipairs(daysGrid:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Get first day of month and number of days
                local firstDay = os.date("*t", os.time{year=selectedDate.year, month=selectedDate.month, day=1})
                local numDays = os.date("*t", os.time{year=selectedDate.year, month=selectedDate.month+1, day=0}).day
                
                -- Update header
                monthYear.Text = os.date("%B %Y", os.time(selectedDate))
                
                -- Add day labels
                local daysOfWeek = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}
                for i, day in ipairs(daysOfWeek) do
                    local dayLabel = CreateElement("TextLabel", {
                        Name = day .. "Label",
                        Size = UDim2.new(0, 100, 0, 20),
                        BackgroundTransparency = 1,
                        Text = day:sub(1, 1),
                        TextColor3 = self.Themes[self.Config.Theme].Text,
                        Font = self.Config.Font,
                        TextSize = 12,
                        LayoutOrder = i
                    })
                    dayLabel.Parent = daysGrid
                end
                
                -- Add empty cells for days before first day of month
                for i = 1, firstDay.wday - 1 do
                    local emptyCell = CreateElement("TextLabel", {
                        Name = "Empty" .. i,
                        Size = UDim2.new(0, 100, 0, 20),
                        BackgroundTransparency = 1,
                        Text = "",
                        LayoutOrder = 7 + i
                    })
                    emptyCell.Parent = daysGrid
                end
                
                -- Add day buttons
                for day = 1, numDays do
                    local dayButton = CreateElement("TextButton", {
                        Name = "Day" .. day,
                        Size = UDim2.new(0, 100, 0, 20),
                        BackgroundColor3 = (day == selectedDate.day and selectedDate.month == os.date("*t").month and selectedDate.year == os.date("*t").year) and self.Config.AccentColor or self.Themes[self.Config.Theme].Foreground,
                        BorderSizePixel = 0,
                        Text = tostring(day),
                        TextColor3 = self.Themes[self.Config.Theme].Text,
                        Font = self.Config.Font,
                        TextSize = 12,
                        LayoutOrder = 7 + (firstDay.wday - 1) + day
                    })
                    
                    dayButton.MouseButton1Click:Connect(function()
                        selectedDate.day = day
                        updateCalendar()
                        
                        if callback then
                            callback(selectedDate)
                        end
                    end)
                    
                    dayButton.Parent = daysGrid
                end
            end
            
            prevMonth.MouseButton1Click:Connect(function()
                selectedDate.month = selectedDate.month - 1
                if selectedDate.month < 1 then
                    selectedDate.month = 12
                    selectedDate.year = selectedDate.year - 1
                end
                updateCalendar()
            end)
            
            nextMonth.MouseButton1Click:Connect(function()
                selectedDate.month = selectedDate.month + 1
                if selectedDate.month > 12 then
                    selectedDate.month = 1
                    selectedDate.year = selectedDate.year + 1
                end
                updateCalendar()
            end)
            
            updateCalendar()
            calendarFrame.Parent = tabContent
            
            function calendar:SetValue(date)
                if type(date) == "table" and date.year and date.month and date.day then
                    selectedDate = date
                    updateCalendar()
                    
                    if callback then
                        callback(selectedDate)
                    end
                end
            end
            
            function calendar:GetValue()
                return selectedDate
            end
            
            return calendar
        end
        
        return tab
    end
    
    -- Initialize with current theme
    window:UpdateTheme()
    
    -- Apply entrance animation
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    Tween(mainFrame, {Size = size or UDim2.new(0, 400, 0, 500)}, 0.3)
    
    return window
end

return ElegantUI
